name: Build neurodesktop

# Scheduled production builds at 17:00 UTC every day.
# Build manually from here: https://github.com/NeuroDesk/neurodesktop/actions/workflows/build-neurodesktop.yml

# DockerHub: https://hub.docker.com/r/vnmd/neurodesktop
# Github Packages: https://github.com/NeuroDesk/neurodesktop/pkgs/container/neurodesktop%2Fneurodesktop

on:
  workflow_dispatch:
  schedule:
    - cron:  '0 17 * * *'
    
env:
  DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_ORG }}

jobs:
  test_cvmfs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cvmfs-server: [152.67.114.42, 150.136.239.221, 203.101.231.144, 132.145.96.34, 140.238.170.185, 130.61.74.69]
    steps:
    - uses: actions/checkout@v2
    - name: check if ${{ matrix.cvmfs-server }} is online and up-to-date
      run: /bin/bash .github/workflows/test_cvmfs.sh  ${{ matrix.cvmfs-server }}
  check_date:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "::set-output name=should_run::false"
  build:
    needs: [test_cvmfs, check_date]
    if: ${{ needs.check_date.outputs.should_run != 'false' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Pull latest neurodesktop build from GitHub packages
      run: |
        echo ${GITHUB_REF}
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
        IMAGEID=ghcr.io/$GITHUB_REPOSITORY/neurodesktop
        IMAGEID=$(echo $IMAGEID | tr '[A-Z]' '[a-z]')
        {
          docker pull $IMAGEID \
            && ROOTFS_CACHE=$(docker inspect --format='{{.RootFS}}' $IMAGEID) \
            && echo "ROOTFS_CACHE=$ROOTFS_CACHE" >> $GITHUB_ENV
        } || echo "$IMAGEID not found. Resuming build..."
        echo "IMAGEID=$IMAGEID" >> $GITHUB_ENV
    - name: Build new neurodesktop image
      run: |
        SHORT_SHA=$(git rev-parse --short $GITHUB_SHA)
        docker build . --file Dockerfile --tag $IMAGEID:$SHORT_SHA --cache-from $IMAGEID --label "GITHUB_REPOSITORY=$GITHUB_REPOSITORY" --label "GITHUB_SHA=$GITHUB_SHA"
        ROOTFS_NEW=$(docker inspect --format='{{.RootFS}}' $IMAGEID:$SHORT_SHA)
        BUILDDATE=`date +%Y%m%d`
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
        echo "ROOTFS_NEW=$ROOTFS_NEW" >> $GITHUB_ENV
        echo "BUILDDATE=$BUILDDATE" >> $GITHUB_ENV
    - name: Push neurodesktop to GitHub packages (if changes found)
      if: env.ROOTFS_NEW != env.ROOTFS_CACHE
      run: |
        # Push to GH Packages
        docker tag $IMAGEID:$SHORT_SHA $IMAGEID:$BUILDDATE
        docker tag $IMAGEID:$SHORT_SHA $IMAGEID:latest
        docker push $IMAGEID:latest
        docker push $IMAGEID:$BUILDDATE
    - name: Push neurodesktop to Docker Hub (if enabled & changes found)
      if: env.ROOTFS_NEW != env.ROOTFS_CACHE && env.DOCKERHUB_ORG != ''
      run: |
        echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        # Push to GH Packages
        docker tag $IMAGEID:$SHORT_SHA $DOCKERHUB_ORG/neurodesktop:$BUILDDATE
        docker tag $IMAGEID:$SHORT_SHA $DOCKERHUB_ORG/neurodesktop:latest
        docker push $DOCKERHUB_ORG/neurodesktop:latest
        docker push $DOCKERHUB_ORG/neurodesktop:$BUILDDATE
